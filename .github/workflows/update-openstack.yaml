name: Update OpenStack Stack and Deploy Application

on:
  push:
    branches:
      - main
    paths:
      - '.github/workflows/**'
      - 'backend/**'
      - 'frontend/**'
  workflow_dispatch:

jobs:
  lint_and_validate:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Python virtual environment for yamllint
      - name: Set up Python virtual environment
        run: |
          sudo apt update
          sudo apt install -y python3 python3-venv
          python3 -m venv myenv
          source myenv/bin/activate
          pip install --upgrade pip
          pip install yamllint

      # Run YAML Linting
      - name: Run YAML Linting
        run: |
          source myenv/bin/activate
          yamllint template.yaml

      # Install jq for JSON validation
      - name: Install jq for JSON validation
        run: sudo apt install -y jq

      # Validate JSON package files
      - name: Validate JSON Files
        run: |
          jq empty backend/package.json
          jq empty frontend/package.json

      # Set up Node.js and install ESLint
      - name: Set up Node.js and install ESLint
        run: |
          sudo apt install -y npm
          npm install eslint @eslint/js globals

          # Grant execute permissions to ESLint binary
          chmod +x ./node_modules/.bin/eslint

          # Run ESLint with the specified config file
          ./node_modules/.bin/eslint -c eslint.config.mjs ./frontend/*.js ./backend/*.js

  well_balanced_test_suite:
    runs-on: ubuntu-latest
    needs: deploy_backend
      
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: food_db
          MYSQL_USER: backend_user
          MYSQL_PASSWORD: ${{ secrets.MYSQL_USER_PASSWORD }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Dependencies for Backend
        working-directory: backend
        run: npm install

      - name: Start Backend Server
        working-directory: backend
        run: |
          nohup npm start &

      # Run Unit Tests
      - name: Run Unit Tests
        working-directory: backend
        run: npm run test:unit

      # Run Integration Tests
      - name: Run Integration Tests
        working-directory: backend
        run: npm run test:integration

  install_dependencies:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Verify Backend Dependencies
        working-directory: backend
        run: npm install

      - name: Verify Frontend Dependencies
        working-directory: frontend
        run: npm install

      - name: Run npm audit for security vulnerabilities
        run: |
          cd backend
          npm audit --audit-level=high
          cd ../frontend
          npm audit --audit-level=high

  configure_openstack:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python virtual environment for OpenStack CLI
        run: |
          sudo apt update
          sudo apt install -y python3 python3-venv
          python3 -m venv myenv
          source myenv/bin/activate
          pip install --upgrade pip
          pip install python-openstackclient python-heatclient

      - name: Configure OpenStack Environment
        env:
          OS_AUTH_URL: ${{ secrets.OS_AUTH_URL }}
          OS_PROJECT_NAME: ${{ secrets.OS_PROJECT_NAME }}
          OS_USERNAME: ${{ secrets.OS_USERNAME }}
          OS_PASSWORD: ${{ secrets.OS_PASSWORD }}
          OS_REGION_NAME: ${{ secrets.OS_REGION_NAME }}
          OS_USER_DOMAIN_NAME: ${{ secrets.OS_USER_DOMAIN_NAME }}
          OS_PROJECT_DOMAIN_ID: ${{ secrets.OS_PROJECT_DOMAIN_ID }}
          OS_PROJECT_ID: ${{ secrets.OS_PROJECT_ID }}
          OS_IDENTITY_API_VERSION: ${{ secrets.OS_IDENTITY_API_VERSION }}
          OS_INTERFACE: ${{ secrets.OS_INTERFACE }}
        run: |
          source myenv/bin/activate
          openstack stack update --existing --template template.yaml infrastructure-delivery-pipeline-stack

  deploy_frontend:
    runs-on: self-hosted
    needs: configure_openstack
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Decode PEM Key and Save
        env:
          PEM_KEY_BASE64: ${{ secrets.PEM_KEY_BASE64 }}
        run: |
          echo "$PEM_KEY_BASE64" | base64 -d > infrastructure-delivery-pipeline-key-pair.pem
          chmod 600 infrastructure-delivery-pipeline-key-pair.pem

      # Deploy Frontend
      - name: Deploy Frontend Files to Linux Instance
        env:
          FRONTEND_IP_ADDRESS: ${{ secrets.FRONTEND_IP_ADDRESS }}
        run: |
          # Create the frontend directory if it doesn't exist
          ssh -o StrictHostKeyChecking=no -i infrastructure-delivery-pipeline-key-pair.pem ubuntu@${{ env.FRONTEND_IP_ADDRESS }} "mkdir -p /home/ubuntu/frontend"
          scp -o StrictHostKeyChecking=no -i infrastructure-delivery-pipeline-key-pair.pem ./frontend/* ubuntu@${{ env.FRONTEND_IP_ADDRESS }}:/home/ubuntu/frontend/
          ssh -o StrictHostKeyChecking=no -i infrastructure-delivery-pipeline-key-pair.pem ubuntu@${{ env.FRONTEND_IP_ADDRESS }} << 'EOF'
            # Kill any existing process on the frontend port 8080
            if lsof -t -i:8080; then
              sudo kill -9 $(lsof -t -i:8080)
            fi

            # Install dependencies and start the frontend server
            sudo apt update
            sudo apt install -y nodejs npm
            cd /home/ubuntu/frontend
            npm install
            nohup node frontend-server.js > /home/ubuntu/frontend/frontend-server.log 2>&1 & disown
          EOF

      - name: Clean Up PEM Key
        run: rm infrastructure-delivery-pipeline-key-pair.pem

  deploy_backend:
    runs-on: self-hosted
    needs: configure_openstack
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Decode PEM Key and Save
        env:
          PEM_KEY_BASE64: ${{ secrets.PEM_KEY_BASE64 }}
        run: |
          echo "$PEM_KEY_BASE64" | base64 -d > infrastructure-delivery-pipeline-key-pair.pem
          chmod 600 infrastructure-delivery-pipeline-key-pair.pem

      - name: Deploy Backend to Backend Instance
        env:
          BACKEND_IP_ADDRESS: ${{ secrets.BACKEND_IP_ADDRESS }}
        run: |
          ssh -o StrictHostKeyChecking=no -i infrastructure-delivery-pipeline-key-pair.pem ubuntu@${{ env.BACKEND_IP_ADDRESS }} << 'EOF'
            # Kill any existing process on port 8080
            if lsof -t -i:8080; then
              sudo kill -9 $(lsof -t -i:8080)
            fi

            # Remove and recreate the backend directory
            rm -rf /home/ubuntu/backend
            mkdir -p /home/ubuntu/backend
          EOF
          
          # Copy the contents of the local backend directory to the server
          scp -o StrictHostKeyChecking=no -i infrastructure-delivery-pipeline-key-pair.pem -r ./backend/* ubuntu@${{ env.BACKEND_IP_ADDRESS }}:/home/ubuntu/backend
          
          ssh -o StrictHostKeyChecking=no -i infrastructure-delivery-pipeline-key-pair.pem ubuntu@${{ env.BACKEND_IP_ADDRESS }} << 'EOF'
            # Install dependencies and restart backend
            sudo apt update
            sudo apt install -y nodejs npm
            cd /home/ubuntu/backend
            npm install
            nohup node app.js > /home/ubuntu/backend-server.log 2>&1 & disown
          EOF
        
      - name: Clean Up PEM Key
        run: rm infrastructure-delivery-pipeline-key-pair.pem
