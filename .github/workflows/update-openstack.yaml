name: Update OpenStack Stack and Deploy Frontend

on:
  push:
    branches:
      - main  # Run on changes to the main branch (adjust if needed)
    paths:
      - 'template.yaml'  # Only trigger when this file is changed
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  update_stack:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install and Upgrade OpenStack CLI and Heat Client
        run: |
          sudo apt update
          sudo apt install -y python3-openstackclient
          sudo apt install -y python3-pip
          pip install --upgrade pip
          if [ ! -d ".cache" ]; then mkdir .cache; fi
          export PIP_CACHE_DIR=.cache
          pip install --cache-dir .cache --upgrade python-openstackclient python-heatclient

      - name: List files in current directory
        run: ls -al .github

      - name: Debug Environment Variables
        run: printenv
    
      - name: Configure OpenStack Environment
        env:
          OS_AUTH_URL: ${{ secrets.OS_AUTH_URL }}
          OS_PROJECT_NAME: ${{ secrets.OS_PROJECT_NAME }}
          OS_USERNAME: ${{ secrets.OS_USERNAME }}
          OS_PASSWORD: ${{ secrets.OS_PASSWORD }}
          OS_REGION_NAME: ${{ secrets.OS_REGION_NAME }}
          OS_USER_DOMAIN_NAME: ${{ secrets.OS_USER_DOMAIN_NAME }}
          OS_PROJECT_DOMAIN_ID: ${{ secrets.OS_PROJECT_DOMAIN_ID }}
          OS_PROJECT_ID: ${{ secrets.OS_PROJECT_ID }}
          OS_IDENTITY_API_VERSION: ${{ secrets.OS_IDENTITY_API_VERSION }}
          OS_INTERFACE: ${{ secrets.OS_INTERFACE }}
        run: |
          export OS_AUTH_URL=$OS_AUTH_URL
          export OS_PROJECT_NAME=$OS_PROJECT_NAME
          export OS_USERNAME=$OS_USERNAME
          export OS_PASSWORD=$OS_PASSWORD
          export OS_REGION_NAME=$OS_REGION_NAME
          export OS_USER_DOMAIN_NAME=$OS_USER_DOMAIN_NAME
          export OS_PROJECT_DOMAIN_ID=$OS_PROJECT_DOMAIN_ID
          export OS_PROJECT_ID=$OS_PROJECT_ID
          export OS_IDENTITY_API_VERSION=$OS_IDENTITY_API_VERSION
          export OS_INTERFACE=$OS_INTERFACE

      - name: Update OpenStack Stack
        env:
          OS_AUTH_URL: ${{ secrets.OS_AUTH_URL }}
          OS_PROJECT_NAME: ${{ secrets.OS_PROJECT_NAME }}
          OS_USERNAME: ${{ secrets.OS_USERNAME }}
          OS_PASSWORD: ${{ secrets.OS_PASSWORD }}
          OS_REGION_NAME: ${{ secrets.OS_REGION_NAME }}
          OS_USER_DOMAIN_NAME: ${{ secrets.OS_USER_DOMAIN_NAME }}
          OS_PROJECT_DOMAIN_ID: ${{ secrets.OS_PROJECT_DOMAIN_ID }}
          OS_PROJECT_ID: ${{ secrets.OS_PROJECT_ID }}
          OS_IDENTITY_API_VERSION: ${{ secrets.OS_IDENTITY_API_VERSION }}
          OS_INTERFACE: ${{ secrets.OS_INTERFACE }}
        run: |
          openstack stack update --existing --template template.yaml infrastructure-delivery-pipeline-stack

      - name: Decode PEM Key and Save
        env:
          PEM_KEY_BASE64: ${{ secrets.PEM_KEY_BASE64 }}
        run: |
          echo "$PEM_KEY_BASE64" | base64 -d > infrastructure-delivery-pipeline-key-pair.pem
          chmod 600 infrastructure-delivery-pipeline-key-pair.pem

      # Deploy Frontend
      - name: Deploy Frontend to Linux Instance
        env:
          FRONTEND_IP_ADDRESS: ${{ secrets.FRONTEND_IP_ADDRESS }}
        run: |
          scp -o StrictHostKeyChecking=no -i infrastructure-delivery-pipeline-key-pair.pem ./frontend/index.html ubuntu@${{ env.FRONTEND_IP_ADDRESS }}:/home/ubuntu/index.html
          ssh -o StrictHostKeyChecking=no -i infrastructure-delivery-pipeline-key-pair.pem ubuntu@${{ env.FRONTEND_IP_ADDRESS }} "sudo mv /home/ubuntu/index.html /var/www/html/index.html"

      # Deploy Backend
      - name: Deploy Backend to Backend Instance
        env:
          BACKEND_IP_ADDRESS: ${{ secrets.BACKEND_IP_ADDRESS }}
        run: |
          ssh -o StrictHostKeyChecking=no -i infrastructure-delivery-pipeline-key-pair.pem ubuntu@${{ env.BACKEND_IP_ADDRESS }} "rm -rf /home/ubuntu/backend"
          scp -o StrictHostKeyChecking=no -i infrastructure-delivery-pipeline-key-pair.pem -r ./backend ubuntu@${{ env.BACKEND_IP_ADDRESS }}:/home/ubuntu/backend
          ssh -o StrictHostKeyChecking=no -i infrastructure-delivery-pipeline-key-pair.pem ubuntu@${{ env.BACKEND_IP_ADDRESS }} << 'EOF'
            sudo apt update
            sudo apt install -y nodejs npm
            cd /home/ubuntu/backend
            npm install
            nohup node app.js > /dev/null 2>&1 & disown  # Start app.js detached
          EOF


      - name: Clean Up PEM Key
        run: rm infrastructure-delivery-pipeline-key-pair.pem
        