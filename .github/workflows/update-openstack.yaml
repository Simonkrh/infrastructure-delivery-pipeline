name: Update OpenStack Stack and Deploy Application

on:
  push:
    branches:
      - main
    paths:
      - ".github/workflows/**"
      - "backend/**"
      - "frontend/**"
  workflow_dispatch:

jobs:
  # Linting and Validation
  lint_and_validate:
    runs-on: self-hosted
    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Cache Backend Node.js Dependencies
      - name: Cache Backend Node.js Dependencies
        uses: actions/cache@v3
        with:
          path: backend/node_modules
          key: ${{ runner.os }}-backend-${{ hashFiles('backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-backend-

      # Cache Frontend Node.js Dependencies
      - name: Cache Frontend Node.js Dependencies
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-frontend-

      # Set up Python and Install yamllint in a Virtual Environment
      - name: Set up Python Virtual Environment
        run: |
          sudo apt update
          sudo apt install -y python3 python3-venv
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install yamllint

      # Run YAML Linting
      - name: Run YAML Linting
        run: |
          source venv/bin/activate
          yamllint template.yaml

      # Validate JSON Files using jq (pre-installed on self-hosted)
      - name: Validate JSON Files
        run: |
          jq empty backend/package.json
          jq empty frontend/package.json

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      # Install Dependencies and Run Linters
      - name: Install Dependencies and Run Linters
        run: |
          # Install backend and frontend dependencies
          npm install --prefix backend
          npm install --prefix frontend

          # Run ESLint for Backend and Frontend
          npm run lint --prefix backend
          npm run lint --prefix frontend

  # Backend Test Suite
  backend_test_suite:
    runs-on: self-hosted
    needs: lint_and_validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      # Cache dependencies
      - name: Cache Node.js dependencies
        uses: actions/cache@v3
        with:
          path: backend/node_modules
          key: ${{ runner.os }}-backend-${{ hashFiles('backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-backend-

      # Install Backend Dependencies
      - name: Install Backend Dependencies
        working-directory: backend
        run: npm install

      # Run Backend Unit Tests
      - name: Run Backend Unit Tests
        working-directory: backend
        run: npm run test:unit

      # Run Backend Integration Tests
      - name: Run Backend Integration Tests
        working-directory: backend
        run: npm run test:integration

      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        with:
          name: backend-test-results
          path: backend/test-results/

  # Frontend Test Suite
  e2e_tests:
    runs-on: self-hosted
    needs: [deploy_backend, deploy_frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      # Cache dependencies
      - name: Cache Node.js dependencies
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-frontend-
          compression-level: none # Skip compression since it up the cache size is small (save time)

      # Install Frontend Dependencies
      - name: Install Frontend Dependencies
        working-directory: frontend
        run: npm install

      # Run Frontend E2E Tests
      - name: Run Frontend E2E Tests
        working-directory: frontend
        run: npm run test:e2e

  # Configure OpenStack
  configure_openstack:
    runs-on: self-hosted
    needs: lint_and_validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      # Install OpenStack CLI tools
      - name: Install OpenStack CLI tools
        run: pip install python-openstackclient python-heatclient

      # Configure OpenStack Environment and Update Stack
      - name: Update OpenStack Stack
        env:
          OS_AUTH_URL: ${{ secrets.OS_AUTH_URL }}
          OS_PROJECT_NAME: ${{ secrets.OS_PROJECT_NAME }}
          OS_USERNAME: ${{ secrets.OS_USERNAME }}
          OS_PASSWORD: ${{ secrets.OS_PASSWORD }}
          OS_REGION_NAME: ${{ secrets.OS_REGION_NAME }}
          OS_USER_DOMAIN_NAME: ${{ secrets.OS_USER_DOMAIN_NAME }}
          OS_PROJECT_DOMAIN_ID: ${{ secrets.OS_PROJECT_DOMAIN_ID }}
          OS_PROJECT_ID: ${{ secrets.OS_PROJECT_ID }}
          OS_IDENTITY_API_VERSION: ${{ secrets.OS_IDENTITY_API_VERSION }}
          OS_INTERFACE: ${{ secrets.OS_INTERFACE }}
        run: |
          openstack stack update --existing --template template.yaml infrastructure-delivery-pipeline-stack

  deploy_frontend:
    runs-on: self-hosted
    needs: configure_openstack
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Decode PEM Key and Save
        env:
          PEM_KEY_BASE64: ${{ secrets.PEM_KEY_BASE64 }}
        run: |
          echo "$PEM_KEY_BASE64" | base64 -d > infrastructure-delivery-pipeline-key-pair.pem
          chmod 600 infrastructure-delivery-pipeline-key-pair.pem

      # Deploy Frontend
      - name: Deploy Frontend Files to Linux Instance
        env:
          FRONTEND_IP_ADDRESS: ${{ secrets.FRONTEND_IP_ADDRESS }}
        run: |
          # Create the frontend directory if it doesn't exist
          ssh -o StrictHostKeyChecking=no -i infrastructure-delivery-pipeline-key-pair.pem ubuntu@${{ env.FRONTEND_IP_ADDRESS }} "mkdir -p /home/ubuntu/frontend"
          scp -o StrictHostKeyChecking=no -i infrastructure-delivery-pipeline-key-pair.pem -r ./frontend/* ubuntu@${{ env.FRONTEND_IP_ADDRESS }}:/home/ubuntu/frontend/
          ssh -o StrictHostKeyChecking=no -i infrastructure-delivery-pipeline-key-pair.pem ubuntu@${{ env.FRONTEND_IP_ADDRESS }} << 'EOF'
            # Kill any existing process on the frontend port 8080
            if lsof -t -i:8080; then
              sudo kill -9 $(lsof -t -i:8080)
            fi

            # Install dependencies and start the frontend server
            sudo apt update
            sudo apt install -y nodejs npm
            cd /home/ubuntu/frontend
            npm install
            nohup node frontend-server.js > /home/ubuntu/frontend/frontend-server.log 2>&1 & disown
          EOF

      - name: Clean Up PEM Key
        run: rm infrastructure-delivery-pipeline-key-pair.pem

  deploy_backend:
    runs-on: self-hosted
    needs: [configure_openstack, backend_test_suite]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Decode PEM Key and Save
        env:
          PEM_KEY_BASE64: ${{ secrets.PEM_KEY_BASE64 }}
        run: |
          echo "$PEM_KEY_BASE64" | base64 -d > infrastructure-delivery-pipeline-key-pair.pem
          chmod 600 infrastructure-delivery-pipeline-key-pair.pem

      - name: Deploy Backend to Backend Instance
        env:
          BACKEND_IP_ADDRESS: ${{ secrets.BACKEND_IP_ADDRESS }}
        run: |
          ssh -o StrictHostKeyChecking=no -i infrastructure-delivery-pipeline-key-pair.pem ubuntu@${{ env.BACKEND_IP_ADDRESS }} << 'EOF'
            # Kill any existing process on port 8080
            if lsof -t -i:8080; then
              sudo kill -9 $(lsof -t -i:8080)
            fi

            # Remove and recreate the backend directory
            rm -rf /home/ubuntu/backend
            mkdir -p /home/ubuntu/backend
          EOF

          # Copy the contents of the local backend directory to the server
          scp -o StrictHostKeyChecking=no -i infrastructure-delivery-pipeline-key-pair.pem -r ./backend/* ubuntu@${{ env.BACKEND_IP_ADDRESS }}:/home/ubuntu/backend

          ssh -o StrictHostKeyChecking=no -i infrastructure-delivery-pipeline-key-pair.pem ubuntu@${{ env.BACKEND_IP_ADDRESS }} << 'EOF'
            # Install dependencies and restart backend
            sudo apt update
            sudo apt install -y nodejs npm
            cd /home/ubuntu/backend
            npm install
            nohup node app.js > /home/ubuntu/backend-server.log 2>&1 & disown
          EOF

      - name: Clean Up PEM Key
        run: rm infrastructure-delivery-pipeline-key-pair.pem
