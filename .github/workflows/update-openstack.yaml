name: Update OpenStack Stack and Deploy Application

on:
  push:
    branches:
      - main
    paths:
      - ".github/workflows/**"
      - "backend/**"
      - "frontend/**"
  workflow_dispatch:

jobs:
  # Linting and Validation
  lint_and_validate:
    runs-on: self-hosted
    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Cache Backend Node.js Dependencies
      - name: Cache Backend Node.js Dependencies
        uses: actions/cache@v3
        with:
          path: backend/node_modules
          key: ${{ runner.os }}-backend-${{ hashFiles('backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-backend-

      # Cache Frontend Node.js Dependencies
      - name: Cache Frontend Node.js Dependencies
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-frontend-

      # Set up Python using official action
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      # Create and activate virtual environment, then install yamllint
      - name: Set up Python Virtual Environment and Install yamllint
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install yamllint

      # Run YAML Linting
      - name: Run YAML Linting
        run: |
          source venv/bin/activate
          yamllint template.yaml

      # Validate JSON Files using jq (pre-installed on self-hosted)
      - name: Validate JSON Files
        run: |
          jq empty backend/package.json
          jq empty frontend/package.json

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      # Install Dependencies and Run Linters
      - name: Install Dependencies and Run Linters
        run: |
          # Install backend and frontend dependencies
          npm install --prefix backend
          npm install --prefix frontend

          # Run ESLint for Backend and Frontend
          npm run lint --prefix backend
          npm run lint --prefix frontend

  # Backend Test Suite
  backend_test_suite:
    runs-on: self-hosted
    needs: lint_and_validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      # Cache dependencies
      - name: Cache Node.js dependencies
        uses: actions/cache@v3
        with:
          path: backend/node_modules
          key: ${{ runner.os }}-backend-${{ hashFiles('backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-backend-

      # Install Backend Dependencies
      - name: Install Backend Dependencies
        working-directory: backend
        run: npm install

      # Run Backend Unit Tests
      - name: Run Backend Unit Tests
        working-directory: backend
        run: npm run test:unit

      # Run Backend Integration Tests
      - name: Run Backend Integration Tests
        working-directory: backend
        run: npm run test:integration

  # E2E tests
  e2e_tests:
    runs-on: self-hosted
    needs: [deploy_backend, deploy_frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      # Cache dependencies
      - name: Cache Node.js dependencies
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-frontend-
          compression-level: none # Skip compression since it up the cache size is small (save time)

      # Install Frontend Dependencies
      - name: Install Frontend Dependencies
        working-directory: frontend
        run: npm install

      # Run Frontend E2E Tests
      - name: Run Frontend E2E Tests
        working-directory: frontend
        run: npm run test:e2e

  # Load Testing
  load_test:
    runs-on: self-hosted
    needs: [e2e_tests]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Execute Permissions for Scripts
        run: chmod +x scripts/*.sh

      - name: Run Load Tests
        run: ./scripts/run_load_tests.sh

  # Configure OpenStack
  configure_openstack:
    runs-on: self-hosted
    needs: lint_and_validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      # Install OpenStack CLI tools
      - name: Install OpenStack CLI tools
        run: pip install python-openstackclient python-heatclient

      # Configure OpenStack Environment and Update Stack
      - name: Update OpenStack Stack
        env:
          OS_AUTH_URL: ${{ secrets.OS_AUTH_URL }}
          OS_PROJECT_NAME: ${{ secrets.OS_PROJECT_NAME }}
          OS_USERNAME: ${{ secrets.OS_USERNAME }}
          OS_PASSWORD: ${{ secrets.OS_PASSWORD }}
          OS_REGION_NAME: ${{ secrets.OS_REGION_NAME }}
          OS_USER_DOMAIN_NAME: ${{ secrets.OS_USER_DOMAIN_NAME }}
          OS_PROJECT_DOMAIN_ID: ${{ secrets.OS_PROJECT_DOMAIN_ID }}
          OS_PROJECT_ID: ${{ secrets.OS_PROJECT_ID }}
          OS_IDENTITY_API_VERSION: ${{ secrets.OS_IDENTITY_API_VERSION }}
          OS_INTERFACE: ${{ secrets.OS_INTERFACE }}
        run: |
          openstack stack update --existing --template template.yaml infrastructure-delivery-pipeline-stack

  # Infrastructure Testing
  infrastructure_tests:
    runs-on: self-hosted
    needs: configure_openstack
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      # Install OpenStack CLI tools
      - name: Install OpenStack CLI tools
        run: pip install python-openstackclient python-heatclient

      # Run Infrastructure Tests
      - name: Run Infrastructure Tests
        env:
          OS_AUTH_URL: ${{ secrets.OS_AUTH_URL }}
          OS_PROJECT_NAME: ${{ secrets.OS_PROJECT_NAME }}
          OS_USERNAME: ${{ secrets.OS_USERNAME }}
          OS_PASSWORD: ${{ secrets.OS_PASSWORD }}
          OS_REGION_NAME: ${{ secrets.OS_REGION_NAME }}
          OS_USER_DOMAIN_NAME: ${{ secrets.OS_USER_DOMAIN_NAME }}
          OS_PROJECT_DOMAIN_ID: ${{ secrets.OS_PROJECT_DOMAIN_ID }}
          OS_PROJECT_ID: ${{ secrets.OS_PROJECT_ID }}
          OS_IDENTITY_API_VERSION: ${{ secrets.OS_IDENTITY_API_VERSION }}
          OS_INTERFACE: ${{ secrets.OS_INTERFACE }}
        run: |
          echo "Starting infrastructure tests..."

          # Verify stack existence and status
          STACK_NAME="infrastructure-delivery-pipeline-stack"
          STACK_STATUS=$(openstack stack show $STACK_NAME -f value -c stack_status)
          if [[ "$STACK_STATUS" != "CREATE_COMPLETE" && "$STACK_STATUS" != "UPDATE_COMPLETE" ]]; then
            echo "Error: Stack $STACK_NAME is not in a COMPLETE state. Current state: $STACK_STATUS"
            exit 1
          fi
          echo "Stack $STACK_NAME is in $STACK_STATUS state."

          # Validate the number of instances in the stack
          EXPECTED_INSTANCE_COUNT=2
          INSTANCE_NAMES=("BackendServer" "FrontendServer")
          ACTUAL_INSTANCE_COUNT=0
          for INSTANCE_NAME in "${INSTANCE_NAMES[@]}"; do
            INSTANCE_STATUS=$(openstack server show $INSTANCE_NAME -f value -c status || echo "NOT_FOUND")
            if [[ "$INSTANCE_STATUS" == "ACTIVE" ]]; then
              ACTUAL_INSTANCE_COUNT=$((ACTUAL_INSTANCE_COUNT + 1))
            else
              echo "Error: Instance $INSTANCE_NAME is not ACTIVE. Current status: $INSTANCE_STATUS"
              exit 1
            fi
          done
          if [[ $ACTUAL_INSTANCE_COUNT -ne $EXPECTED_INSTANCE_COUNT ]]; then
            echo "Error: Expected $EXPECTED_INSTANCE_COUNT instances, but found $ACTUAL_INSTANCE_COUNT."
            exit 1
          fi
          echo "All instances are ACTIVE as expected."

          # Verify network resources
          NETWORK_NAME="infrastructure-delivery-pipeline-network"
          NETWORK_EXISTS=$(openstack network show $NETWORK_NAME -f value -c id || echo "NOT_FOUND")
          if [[ "$NETWORK_EXISTS" == "NOT_FOUND" ]]; then
            echo "Error: Network $NETWORK_NAME does not exist."
            exit 1
          fi
          echo "Network $NETWORK_NAME exists."

          # Verify frontend security group
          FRONTEND_SECURITY_GROUP="infrastructure-delivery-pipeline-security-group-frontend"
          FRONTEND_SECURITY_GROUP_EXISTS=$(openstack security group show $FRONTEND_SECURITY_GROUP -f value -c id || echo "NOT_FOUND")
          if [[ "$FRONTEND_SECURITY_GROUP_EXISTS" == "NOT_FOUND" ]]; then
            echo "Error: Security group $FRONTEND_SECURITY_GROUP does not exist."
            exit 1
          fi
          echo "Security group $FRONTEND_SECURITY_GROUP exists."

          # Verify backend security group
          BACKEND_SECURITY_GROUP="infrastructure-delivery-pipeline-security-group-backend"
          BACKEND_SECURITY_GROUP_EXISTS=$(openstack security group show $BACKEND_SECURITY_GROUP -f value -c id || echo "NOT_FOUND")
          if [[ "$BACKEND_SECURITY_GROUP_EXISTS" == "NOT_FOUND" ]]; then
            echo "Error: Security group $BACKEND_SECURITY_GROUP does not exist."
            exit 1
          fi
          echo "Security group $BACKEND_SECURITY_GROUP exists."

          echo "All infrastructure tests passed successfully."

  # Deploy frontend
  deploy_frontend:
    runs-on: self-hosted
    needs: infrastructure_tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set Execute Permissions for Scripts
        run: chmod +x scripts/*.sh

      - name: Decode PEM Key and Save
        env:
          PEM_KEY_BASE64: ${{ secrets.PEM_KEY_BASE64 }}
        run: |
          echo "$PEM_KEY_BASE64" | base64 -d > infrastructure-delivery-pipeline-key-pair.pem
          chmod 600 infrastructure-delivery-pipeline-key-pair.pem

      #Deploy
      - name: Deploy Frontend
        env:
          FRONTEND_IP: ${{ secrets.FRONTEND_IP }}
          PEM_KEY_PATH: "infrastructure-delivery-pipeline-key-pair.pem"
        run: ./scripts/deploy_frontend.sh

      - name: Clean Up PEM Key
        run: rm infrastructure-delivery-pipeline-key-pair.pem

  # Deploy backend
  deploy_backend:
    runs-on: self-hosted
    needs: [configure_openstack, infrastructure_tests, backend_test_suite]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set Execute Permissions for Scripts
        run: chmod +x scripts/*.sh

      - name: Decode PEM Key and Save
        env:
          PEM_KEY_BASE64: ${{ secrets.PEM_KEY_BASE64 }}
        run: |
          echo "$PEM_KEY_BASE64" | base64 -d > infrastructure-delivery-pipeline-key-pair.pem
          chmod 600 infrastructure-delivery-pipeline-key-pair.pem

      #Deploy
      - name: Deploy Backend
        env:
          BACKEND_IP: ${{ secrets.BACKEND_IP }}
          PEM_KEY_PATH: "infrastructure-delivery-pipeline-key-pair.pem"
        run: ./scripts/deploy_backend.sh

      - name: Clean Up PEM Key
        run: rm infrastructure-delivery-pipeline-key-pair.pem
